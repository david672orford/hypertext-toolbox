#! /usr/bin/python3
# html-res-minimizer
#
# Minimize JS and CSS files. Convert SCSS files to CSS.
# To use, list individual files and directories on the command line.
# Individual files named must exist and have the extension of a supported type.
# Directories will be searched (though not recursively) and supported files
# within them will be processed.
#

import os
import sys
import re
from rjsmin import jsmin
from rcssmin import cssmin
from scss import Scss

processors = {
	'js': ['js', lambda text: jsmin(text)],
	'css': ['css', lambda text: cssmin(text)],
	'scss': ['css', lambda text: cssmin(Scss().compile(text))],
	}

def filter_files(filenames, ignore_unsupported=False):
	jobs = []
	for filename in filenames:
		m = re.search(r"^(.+?)(\.min)?\.([^\./]+)$", filename)
		if m and m.group(2) is None:		# matches and no ".min.",
			if m.group(3) in processors:	# supported extension
				jobs.append((m.group(3), filename, "%s.min.%s" % (m.group(1), processors[m.group(3)][0])))
				continue
		if not ignore_unsupported:
			sys.stderr.write("Unsupported resource: %s\n" % filename)
			sys.exit(1)
	return jobs

def read_file(filename):
	with open(inname, mode="r", encoding="utf-8") as infile:
		return infile.read()

# Build a list of the conversions to be done
jobs = []
for arg in sys.argv[1:]:
	if os.path.isdir(arg):
		filenames = []
		for filename in os.listdir(arg):
			filenames.append(os.path.join(arg, filename))
		jobs.extend(filter_files(filenames, ignore_unsupported=True))
	else:
		jobs.extend(filter_files([arg]))

# Perform the conversions on the files in the list
for ext, inname, outname in jobs:
	print("  %s: %s" % (ext, inname))
	intext = read_file(inname)
	outtext = processors[ext][1](intext)

	existing_outtext = read_file(outname) if os.path.exists(outname) else None

	if existing_outtext != outtext:
		with open(outname, mode="w", encoding="utf-8") as fh:
			fh.write(outtext)

