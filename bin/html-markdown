#! /usr/bin/python3
# html-markdown
# Experimental script to convert Markdown to HTML
#
# Python-Markdown (used here)
#   https://github.com/Python-Markdown/markdown
# Commonmark
#   https://github.com/readthedocs/commonmark.py
# Mistletoe
#   https://github.com/miyuchina/mistletoe
#   Claims somewhat higher performance than Python-Markdown
#   and significantly higher performance than Commonmark.
#

import sys
import os
import re
from markdown import markdown
from yaml import safe_load as load_yaml
import jinja2
from functools import lru_cache

config_file = "html-markdown.conf"

# Container for site or page metadata
class MetaData(dict):
	def __getattr__(self, name):
		return self.get(name, None)
	def __setattr__(self, name, value):
		self[name] = value

# Load site configuration
site = MetaData()
with open(config_file, mode="r", encoding="utf-8") as conf:
	site.update(load_yaml(conf))

if site.template_dir is None:
	site.template_dir = os.path.join(os.path.dirname(config_file), site.templates_dir)

# Intialize template engine
template_env = jinja2.Environment(loader=jinja2.FileSystemLoader(searchpath=site.template_dir)))
@lru_cache
def load_template(template):
	return template_env.get_template(template)

# Convert all of the Markdown files named on the command line into HTML files placed alongside them
for filename in sys.argv[1:]:
	assert filename.endswith(".md")
	output_filename = re.sub(r'\.md$', '.html', filename)

	# Open the markdown source file
	with open(filename, mode="r", encoding="utf-8") as infile:
		text = infile.read()

	# Split off and parse YAML metadata at start
	page = MetaData()
	if text.startswith("---\n"):
		parts = text.split("---\n")
		page.update(load_yaml(parts[1]))
		content = parts[2]
	else:
		content = text

	# Convert markdown to HTML
	content = markdown(content)

	# Load the template specified in this page's metadata or (if none
	# is specified), the site's default template.
	template = load_template(page.template or site.template)

	# Insert the HTML (and the metadata) into the page template
	html = template.render(site=site, page=page, content=content)

	# Write finished HTML file
	with open(output_filename, mode="w", encoding="utf-8") as outfile:
		outfile.write(html)

	output_filename_gz = output_filename + ".gz"
	if os.path.exists(output_filename_gz):
		os.path.unlink(output_filename_gz)

