#! /usr/bin/python3
# html-gz
# Gzip compress the files name don the command line putting the compressed
# versions alongside the originals. Comparse dates to figure out which
# compressed copies are out-of-date.
#
# Uses Zopfli:
# https://github.com/google/zopfli

import sys
import os
import subprocess

verbose_on = False

def verbose(message):
	if verbose_on:
		print(message)
	pass

files_compressed = 0
files_recompressed = 0
files_total = 0

for filename in sys.argv[1:]:
	if filename == "--verbose":
		verbose_on = True
		continue
	if filename.endswith(".gz"):
		continue
	if filename.endswith("~"):
		continue

	verbose("\"%s\"" % filename)
	filename_output = "%s.gz" % filename
	filename_mtime = os.path.getmtime(filename)

	if not os.path.exists(filename_output):
		verbose("  compressing...")
		go = True
		files_compressed += 1
	elif os.path.getmtime(filename_output) < filename_mtime:
		verbose("  recompressing...")
		go = True
		files_recompressed += 1
	else:
		verbose("  gz is up-to-date")
		go = False
	files_total += 1

	if go:
		try:
			output = subprocess.check_output(
				("zopfli", "-i1000", filename),
				stderr=subprocess.STDOUT
				)
		except subprocess.CalledProcessError:
			print("    failed: non-zero exit code")
			print(output)
			sys.exit(1)

		# Set the modification time of the output file to 10ms after the
		# modification time of the source file. This avoids strange errors
		# which we think are caused by the resolution of the mtime which
		# were causing unnecessary rebuilding.
		os.utime(filename_output, (filename_mtime + 0.01, filename_mtime + 0.01))

print("Compressed %d and recompressed %d of %d files" % (files_compressed, files_recompressed, files_total))

