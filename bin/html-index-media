#! /usr/bin/python3
# encoding=utf-8
# html-index-media
# Last modified: 3 March 2017
#
# For each directory listed on the command line build an index.html from the
# template index.html.tmpl. Insert into the <tbody> of the first <table> a
# <tr> for each video with a play button and download links to MP4 and WEBM
# versions.

import glob
import os
import sys
import re
import json
import lxml.html
from lxml.builder import E
from urllib.parse import quote
from collections import OrderedDict

# So that they come out in the same order every time
def attribs(**attribs):
	return OrderedDict(sorted(attribs.items(), key=lambda t: t[0]))

def qualify_src(item, src):
	if re.match(r'^https?://', src, re.I):
		return src
	else:
		return "%s/%s" % (item['basedir'], src)

mimetypes = {
	'audio/mpeg': 'MP3',
	'audio/ogg': 'Ogg',
	'video/mp4': 'MP4',
	'video/webm': 'WebM'
	}

initial_cwd = os.getcwd()
verbose = True
for folder in sys.argv[1:]:
	if folder == "--verbose":
		verbose = True
		continue
	if verbose:
		print("%s..." % folder)
	os.chdir(initial_cwd)
	os.chdir(folder)

	# Load the HTML template
	template = lxml.html.parse(open("index.html.tmpl"))
	target_tbody = template.xpath("//table/tbody")[0]

	# Load a list of the media files
	manifests = glob.glob("[A-Z]*/*.json")
	manifests = sorted(manifests, key=lambda key: re.sub(r"(\d+)$", lambda m: "%02d" % int(m.group(1)), key.split("--")[0].split(".")[0]))

	index = 0
	playlist = []
	for manifest in manifests:
		if verbose:
			print("  %s" % manifest)

		with open(manifest) as fp:
			item = json.load(fp)

		item['title'] = os.path.splitext(os.path.basename(manifest))[0]
		basedir = os.path.dirname(manifest)
		item['basedir'] = quote(basedir)
	
		# Create a table row to represent this recording in its various encodings.
		tr = E.tr()

		tr.append(E.td(E.img(attribs(
			src='../lib/website/btn_play.svg',
			alt='Play Button',
			type='image/svg+xml',
			onclick='play(%d)' % index,
			))))

		title = item['title']
		if os.path.exists(os.path.join(basedir, "index.html")):
			title = E.a(title, {"href":quote(basedir + "/")})
		tr.append(E.td(title))

		downloads = (item.get('video',[]) + item.get('audio',[]))
		downloads.sort(key=lambda download: download['filesize'])
		td = E.td()
		for download in downloads:
			if re.match(r'^https?://', download['src'], re.I):
				continue	# not ours
			href = "%s/%s" % (quote(os.path.dirname(manifest)), download['src'])

			a = E.a(attribs(href=href, type=download['mimetype'], download='__DUMMY__'))
			a.append(E.span(mimetypes.get(download['mimetype'],'???')))
			if 'framesize' in download:
				a.append(E.span("%dx%d" % (download['framesize'][0], download['framesize'][1])))
			size = float(download['filesize']) / (1024 * 1024)	# convert to megabytes
			a.append(E.span("%.1fMB" % size))

			td.append(a)

		if len(td) > 0:
			playlist.append(item)
			index += 1
			tr.append(td)
			tr.tail = '\n\t'
			target_tbody.append(tr)

	script = template.xpath("//script[@id='playlist']")[0]
	script.text = "\nvar playlist=%s;\n" % json.dumps(playlist, indent=1, separators=(',',':'))

	output = lxml.html.tostring(template, encoding='unicode', pretty_print=False, include_meta_content_type=True)
	output = output.replace('="__DUMMY__"','')
	output = output.encode("utf-8")
	
	# If the output file already exists, see if the one we would write would be different.
	if os.path.exists("index.html"):
		if output == open("index.html", "rb").read():
			#print ("Unchanged.")
			continue

	# Write out the finished index.
	open("index.html", "wb").write(output)

	# Remove compressed version since it is now obsolete.
	if os.path.exists("index.html.gz"):
		os.unlink("index.html.gz")

